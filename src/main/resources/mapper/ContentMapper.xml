<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="main.biggreenbook.entity.dao.ContentMapper">

    <resultMap id="previewCardMap" type="main.biggreenbook.entity.vo.PreviewCard">
        <id property="contentCid" column="cid"/>
        <result property="contentCid" column="cid"/>
        <result property="contentLikeAmount" column="like_amount"/>
        <result property="contentTitle" column="title"/>
        <result property="resourcePath" column="first_path"/>
        <result property="resourceType" column="type"/>
        <result property="userAvatarPath" column="avatar"/>
        <result property="userNickname" column="nickname"/>
    </resultMap>

    <resultMap id="contentInfoMap" type="main.biggreenbook.entity.vo.ContentInfo">
        <result property="cid" column="cid"/>
        <result property="title" column="title"/>
        <result property="text" column="text"/>
        <result property="date" column="date"/>
        <result property="likeAmount" column="likeAmount"/>
        <result property="sid" column="sid"/>
        <result property="path" column="paths"/>
        <result property="uid" column="uid"/>
        <result property="userNickname" column="nickname"/>
        <result property="userAvatarPath" column="avatar_path"/>
        <result property="tag" column="tags"/>

        <result property="status" column="status"/>
        <result property="like" column="islike"/>
        <result property="collection" column="iscollection"/>
    </resultMap>


    <!--获取内容详情-->
    <select id="getContentInfo" resultMap="contentInfoMap">
select `content`.`cid` as `cid`,
         `content`.`title` as `title`,
         `content`.`main_text` as `text`,
         `content`.`date`as `date`,
         `content`.`like_amount` as `likeAmount`,
         `content`.`sid` as `sid`,
				 `resource`.`paths` as `paths`,
         `content`.`uid` as `uid`,
         `content`.`tags` as `tags`,
         `user`.`nickname` as `nickname`,
         `user`.`avatar_path` as `avatar_path`,
         count(`follow`.`follower`) as `status`,
         count(`likes`.`goal`) as `islike`,
         count(`collection`.`cid`) as `iscollection`
from `content`
left join `user` on `content`.`cid` = #{cid}
left join `follow` on `follow`.`follower` = #{uid}
left join `likes` on `content`.`cid` = `likes`.`goal` and `likes`.`uid` = #{uid}
left join `collection` on `content`.`cid` = `collection`.`cid` and `collection`.`uid` = #{uid}
left join `resource` on `resource`.`sid` = `content`.`sid`
where `user`.`uid` = `content`.`uid`
group by `content`.`cid`
    </select>

    <!--修改点赞数-->
    <update id="updateLikeAmount">
        update `content`
        set `like_amount` = `like_amount` + #{isLike}
        where `content`.`cid` = #{cid}
    </update>
    <!--查询点赞数-->
    <select id="queryLikeAmount" resultType="int">
        select `like_amount`
        from `content`
        where `content`.`cid` = #{cid}
    </select>
    <!--新增点赞-->
    <insert id="addLikes">
        insert into `likes`
        values (#{goal}, #{likeType}, #{uid}, #{date})
    </insert>
    <!--取消点赞-->
    <delete id="subLikes">
        delete
        from `likes`
        where `likes`.`goal` = #{goal}
          and `likes`.`uid` = #{uid}
    </delete>

    <!--添加收藏-->
    <insert id="addCollection">
        insert into `collection`
        values (#{uid}, #{cid}, #{date})
    </insert>
    <!--取消收藏-->
    <delete id="deleteCollection">
        delete
        from `collection`
        where `collection`.`uid` = #{uid}
          and `collection`.`cid` = #{cid}
    </delete>

    <!--添加举报-->
    <insert id="addReportContent">
        insert into `report`
        values (#{uid}, #{cid}, #{date}, 0, #{reason})
    </insert>

    <!--发布内容-->
    <insert id="publishContent">
        insert into `content`
        values (#{content.cid}, #{content.title}, #{content.mainText}, #{content.date}, #{content.type},
                #{content.likeAmount}, #{content.uid}, #{content.sid},#{content.tags})
    </insert>
    <!--修改发布的内容-->
    <update id="updateContent">
        update `content`
        set title     = #{content.title},
            main_text = #{content.mainText},
            sid       = #{content.sid},
            tags      = #{content.tags}
        where `content`.`cid` = #{content.cid}
    </update>

    <!--    &lt;!&ndash;    在当前Mapper.xml中使用二级缓存&ndash;&gt;-->
    <!--    <cache eviction="FIFO"-->
    <!--           flushInterval="60000"-->
    <!--           size="512"-->
    <!--           readOnly="true"/>-->

    <select id="getContent" parameterType="map" resultMap="ContentMap">
        select *
        from bgb.content limit #{index}, #{target}
    </select>

    <resultMap id="ContentMap" type="main.biggreenbook.entity.pojo.ContentMessage">
        <result property="cid" column="cid"/>
        <result property="title" column="title"/>
        <result property="date" column="date"/>
        <result property="author" column="nickname"/>
        <result property="uid" column="uid"/>
        <result property="likeAmount" column="like_amount"/>
        <result property="text" column="main_text"/>
        <result property="path" column="paths"/>
    </resultMap>

    <select id="getContents" parameterType="map" resultMap="ContentMap">
        select c.cid,
        c.title,
        c.main_text,
        c.date,
        c.like_amount,
        c.type,
        r.paths,
        u.nickname,
        u.uid
        from resource r,
        content c
        join user u on u.uid = c.uid
        <where>
            <if test="start != null">
                c.date between #{start} and #{end} and
            </if>
            c.sid = r.sid
        </where>
        order by c.date desc
        <if test="index != null">
            limit #{index}, #{target}
        </if>
    </select>

    <select id="countAllContents" parameterType="map" resultType="int">
        select count(*) from bgb.content
        <where>
            <if test="start != null">
                date between #{start} and #{end}
            </if>
        </where>
    </select>

    <delete id="deleteSelect" parameterType="java.util.List">
        delete from bgb.content where
        <foreach collection="list" item="cid" separator="or">
            cid = #{cid}
        </foreach>
    </delete>

    <!--    <select id="queryContents" parameterType="map" resultMap="ContentMap">-->
    <!--        select c.cid, c.title, c.date, c.like_amount, c.type, JSON_EXTRACT(paths, '$[0]') path, u.nickname, u.uid from resource r, content c join user u on u.uid = c.uid-->
    <!--        where c.sid = r.sid and c.title like concat('%', #{title}, '%') limit #{index}, #{target};-->
    <!--    </select>-->

    <select id="queryContents" parameterType="map" resultMap="ContentMap">
        select c.cid, c.title, c.main_text, c.date, c.like_amount, c.type, r.paths, u.nickname, u.uid from resource r,
        content c join user u on u.uid = c.uid
        <where>
            c.sid = r.sid
            <if test="uid != null">
                and c.uid = #{uid}
            </if>
            <if test="title != null">
                and c.title like concat('%', #{title}, '%')
            </if>
            <if test="nickname != null">
                and u.nickname like concat('%', #{nickname}, '%')
            </if>
            <if test="start != null">
                and c.date between #{start} and #{end}
            </if>
        </where>
        order by c.date desc limit #{index}, #{target}
    </select>

    <select id="countQueryContents" parameterType="map" resultType="int">
        select count(*) from content c, user u
        <where>
            c.uid = u.uid and
            <if test="title != null">
                c.title like concat('%', #{title}, '%')
            </if>
            <if test="nickname != null">
                u.nickname like concat('%', #{nickname}, '%')
            </if>
            <if test="uid != null">
                c.uid = #{uid}
            </if>
            <if test="start != null">
                and c.date between #{start} and #{end}
            </if>
        </where>

    </select>

    <select id="queryContentsByUid" parameterType="map" resultMap="ContentMap">
        select c.cid,
               c.title,
               c.main_text,
               c.date,
               c.like_amount,
               c.type,
               r.paths,
               u.nickname,
               u.uid
        from resource r,
             content c
                 join user u on u.uid = c.uid
        where c.sid = r.sid
          and c.uid = #{uid} limit #{index}
            , #{target};
    </select>

    <select id="checkContent" parameterType="map" resultMap="ContentMap">
        select c.cid,
               c.title,
               c.main_text,
               c.date,
               c.like_amount,
               c.type,
               paths,
               u.nickname,
               u.uid
        from resource r,
             content c
                 join user u on u.uid = c.uid
        where c.sid = r.sid
          and c.cid = #{cid};
    </select>


    <select id="getNextContents" parameterType="map" resultMap="ContentMap">
        select c.cid, c.title, c.main_text, c.date, c.like_amount, c.type, r.paths, u.nickname, u.uid from resource r,
        content c join user u on u.uid = c.uid
        <where>
            c.sid = r.sid and c.cid != #{cid}
            <if test="end != null">
                and c.date between '2022-04-01T16:00:00.000+00:00' and #{end}
            </if>
        </where>
        order by c.date desc
    </select>

    <select id="getPreviousContents" parameterType="map" resultMap="ContentMap">
        select c.cid, c.title, c.main_text, c.date, c.like_amount, c.type, r.paths, u.nickname, u.uid from resource r,
        content c join user u on u.uid = c.uid
        <where>
            c.sid = r.sid and c.cid != #{cid}
            <if test="start != null">
                and c.date between #{start} and '2050-04-01T16:00:00.000+00:00'
            </if>
        </where>
        order by c.date
    </select>

    <!-- HOMEPAGE -->

    <select id="getHomePageQueryId" resultType="java.lang.Integer">
        select count(*)
        from `content`;
    </select>

    <select id="getHomePageLatestPart" resultMap="previewCardMap">
        select `content`.`cid`                                        as cid,
               `content`.`like_amount`                                as like_amount,
               `content`.`title`                                      as title,
               `resource`.`type`                                      as type,
               JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
               `user`.`avatar_path`                                   as avatar,
               `user`.`nickname`                                      as nickname
        from `content`
                 inner join `user` on `user`.`uid` = `content`.`uid`
                 inner join `resource` on `resource`.`sid` = `content`.`sid`
        order by `content`.`date` desc limit 0,#{amount}
    </select>

    <select id="getHomePageContent" resultMap="previewCardMap">
        select `content`.`cid`                                        as cid,
               `content`.`like_amount`                                as like_amount,
               `content`.`title`                                      as title,
               `resource`.`type`                                      as type,
               JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
               `user`.`avatar_path`                                   as avatar,
               `user`.`nickname`                                      as nickname
        from `content`
                 inner join `user` on `user`.`uid` = `content`.`uid`
                 inner join `resource` on `resource`.`sid` = `content`.`sid`
        order by `content`.`date` asc
            limit ${pageSize*pageNum}, #{pageSize}
    </select>

    <!-- SEARCHING -->

    <select id="getSearchQueryId" resultType="java.lang.Integer">
        select count(*)
        from `content`
        where `content`.`title` like '%${search}%'
           or `content`.`main_text` like '%${search}%'
    </select>

    <select id="getContentBySearch" resultMap="previewCardMap" parameterType="map">
        select `content`.`cid` as cid,
        `content`.`like_amount` as like_amount,
        `content`.`title` as title,
        `resource`.`type` as type,
        JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
        `user`.`avatar_path` as avatar,
        `user`.`nickname` as nickname
        from `content`
        inner join `user` on `user`.`uid` = `content`.`uid`
        inner join `resource` on `resource`.`sid` = `content`.`sid`
        <if test="search != null and search != ''">
            where `content`.`title` like '%${search}%'
            or `content`.`main_text` like '%${search}%'
        </if>
        <choose>
            <when test="sort == 'HOT'">
                <choose>
                    <when test="pageNum == 0 and amount != pageSize">
                        order by `content`.`like_amount` desc limit 0,#{amount}
                    </when>
                    <when test="amount == pageSize">
                        order by `content`.`like_amount` asc limit ${pageSize*pageNum}, #{pageSize}
                    </when>
                </choose>
            </when>
            <when test="sort == 'LATEST'">
                <choose>
                    <when test="pageNum == 0 and amount != pageSize">
                        order by `content`.`date` desc limit 0,#{amount}
                    </when>
                    <when test="amount == pageSize">
                        order by `content`.`date` asc limit ${pageSize*pageNum}, #{pageSize}
                    </when>
                </choose>
            </when>
        </choose>
    </select>

    <!-- USER COLLECTION -->

    <select id="getUserCollections" resultMap="previewCardMap">
        select `content`.`cid`                                        as cid,
               `content`.`like_amount`                                as like_amount,
               `content`.`title`                                      as title,
               `resource`.`type`                                      as type,
               JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
               `user`.`avatar_path`                                   as avatar,
               `user`.`nickname`                                      as nickname
        from `collection`
                 inner join `content` on `content`.`cid` = `collection`.`cid`
                 inner join `user` on `user`.`uid` = `content`.`uid`
                 inner join `resource` on `resource`.`sid` = `content`.`sid`
        where `collection`.`uid` = #{uid}
        order by `collection`.`date` desc
            limit ${pageSize*pageNum}, #{pageSize}
    </select>


    <select id="getUserCollectionAmount" resultType="java.lang.Integer">
        select count(*)
        from `collection`
        where `uid` = #{uid}
    </select>

    <select id="getUserContentAmount" resultType="java.lang.Integer">
        select count(*)
        from `content`
        where `uid` = #{uid}
    </select>

    <select id="getUserLiked" resultMap="previewCardMap">
        select `content`.`cid`                                        as cid,
               `content`.`like_amount`                                as like_amount,
               `content`.`title`                                      as title,
               `resource`.`type`                                      as type,
               JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
               `user`.`avatar_path`                                   as avatar,
               `user`.`nickname`                                      as nickname
        from `likes`
                 inner join `content` on `content`.`cid` = `likes`.`goal` and `likes`.`type` = 'content'
                 inner join `user` on `user`.`uid` = `content`.`uid`
                 inner join `resource` on `resource`.`sid` = `content`.`sid`
        where `likes`.`uid` = #{uid}
        order by `likes`.`date` desc
            limit ${pageSize*pageNum}, #{pageSize}
    </select>

    <select id="getUserLikedAmount" resultType="java.lang.Integer">
        select count(*)
        from `likes`
        where `uid` = #{uid}
    </select>

    <select id="getUserPublished" resultMap="previewCardMap">
        select `content`.`cid`                                        as cid,
               `content`.`like_amount`                                as like_amount,
               `content`.`title`                                      as title,
               `resource`.`type`                                      as type,
               JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
               `user`.`avatar_path`                                   as avatar,
               `user`.`nickname`                                      as nickname
        from `content`
                 inner join `user` on `user`.`uid` = `content`.`uid`
                 inner join `resource` on `resource`.`sid` = `content`.`sid`
        where `content`.`uid` = #{uid}
        order by `content`.`date` desc
            limit ${pageSize*pageNum}, #{pageSize}
    </select>

    <select id="getUserPublishedAmount" resultType="java.lang.Integer">
        select count(*)
        from `content`
        where `uid` = #{uid}
    </select>

    <select id="getUserReportState" resultType="java.lang.Integer">
        select count(*)
        from report
        where `uid` = #{uid}
          and `cid` = #{cid}
    </select>

</mapper>
