<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="main.biggreenbook.entity.dao.ContentMapper">

    <!--获取内容数量（含搜索）-->
    <select id="getQueryId" resultType="java.lang.Integer">
        select count(*)
        from `content`
        <if test="search != null and search != ''">
            where `content`.`title` like '%${search}%'
            or `content`.`main_text` like '%${search}%'
        </if>
    </select>

    <resultMap id="previewCardMap" type="main.biggreenbook.entity.vo.PreviewCard">
        <id property="contentCid" column="cid"/>
        <result property="contentCid" column="cid"/>
        <result property="contentLikeAmount" column="like_amount"/>
        <result property="contentTitle" column="title"/>
        <result property="resourcePath" column="first_path"/>
        <result property="resourceType" column="type"/>
        <result property="userAvatarPath" column="avatar"/>
        <result property="userNickname" column="nickname"/>
    </resultMap>
    <resultMap id="contentInfoMap" type="main.biggreenbook.entity.vo.ContentInfo">
            <result property="cid" column="cid"/>
            <result property="title" column="title"/>
            <result property="text" column="text"/>
            <result property="date" column="date"/>
            <result property="likeAmount" column="likeAmount"/>
            <result property="sid" column="sid"/>
            <result property="paths" column="paths"/>
            <result property="uid" column="uid"/>
            <result property="userNickname" column="nickname"/>
            <result property="userAvatarPath" column="avatar_path"/>

            <result property="status" column="status"/>
            <result property="like" column="islike"/>
            <result property="collection" column="iscollection"/>
    </resultMap>


    <!--获取内容-->
    <select id="getContentByPage" resultMap="previewCardMap">
        select `content`.`cid`                                        as cid,
               `content`.`like_amount`                                as like_amount,
               `content`.`title`                                      as title,
               `resource`.`type`                                      as type,
               JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
               `user`.`avatar_path`                                   as avatar,
               `user`.`nickname`                                      as nickname
        from `content`
                 inner join `user` on `user`.`uid` = `content`.`uid`
                 inner join `resource` on `resource`.`sid` = `content`.`sid`
        order by `content`.`date` asc
            limit ${pageSize*pageNum}, #{pageSize}
    </select>

    <!--获取最新的若干条-->
    <select id="getLatestContent" resultMap="previewCardMap">
        select `content`.`cid`                                        as cid,
               `content`.`like_amount`                                as like_amount,
               `content`.`title`                                      as title,
               `resource`.`type`                                      as type,
               JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
               `user`.`avatar_path`                                   as avatar,
               `user`.`nickname`                                      as nickname
        from `content`
                 inner join `user` on `user`.`uid` = `content`.`uid`
                 inner join `resource` on `resource`.`sid` = `content`.`sid`
        order by `content`.`date` desc
            limit 0,#{amount}
    </select>

    <!--通过搜索获取内容-->
    <select id="getContentBySearch" resultMap="previewCardMap" parameterType="map">
        select `content`.`cid`                                        as cid,
        `content`.`like_amount`                                as like_amount,
        `content`.`title`                                      as title,
        `resource`.`type`                                      as type,
        JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
        `user`.`avatar_path`                                   as avatar,
        `user`.`nickname`                                      as nickname
        from `content`
        inner join `user` on `user`.`uid` = `content`.`uid`
        inner join `resource` on `resource`.`sid` = `content`.`sid`
        <if test="search != null and search != ''">
            where `content`.`title` like '%${search}%'
            or `content`.`main_text` like '%${search}%'
        </if>
        <choose>
            <when test="sort == 'HOT'">
                <choose>
                    <when test="pageNum == 0 and amount != pageSize">
                        order by `content`.`like_amount` desc limit 0,#{amount}
                    </when>
                    <when test="amount == pageSize">
                        order by `content`.`like_amount` asc limit ${pageSize*pageNum}, #{pageSize}
                    </when>
                </choose>
            </when>
            <when test="sort == 'LATEST'">
                <choose>
                    <when test="pageNum == 0 and amount != pageSize">
                        order by `content`.`date` desc limit 0,#{amount}
                    </when>
                    <when test="amount == pageSize">
                        order by `content`.`date` asc limit ${pageSize*pageNum}, #{pageSize}
                    </when>
                </choose>
            </when>
        </choose>
    </select>

    <!--获取内容详情-->
    <select id="getContentInfo" resultMap="contentInfoMap">
        SELECT `t`.`cid` as `cid`,
        `t`.`title` as `title`,
        `t`.`text` as `text`,
        `t`.`date` as `date`,
        `t`.`likeAmount` as `likeAmount`,
        `t`.`sid` as `sid`,
        `t`.`paths` as `paths`,
        `t`.`uid` as `uid`,
        `t`.`nickname` as `nickname`,
        `t`.`avatar_path` as `avatar_path`,
        `t`.`status` as `status`,
		count(`likes`.`goal`) as islike,
		count(`collection`.`cid`) as iscollection
 		from(select `r`.`cid` as `cid`,
					`r`.`title` as `title`,
					`r`.`text` as `text`,
					`r`.`date` as `date`,
					`r`.`likeAmount` as `likeAmount`,
					`r`.`sid` as `sid`,
					`r`.`paths` as `paths`,
					`u`.`uid` as `uid`,
					`u`.`nickname` as `nickname`,
					`u`.`avatar_path` as `avatar_path`,
					`u`.`status` as `status`
			from(select `c`.`cid` as `cid`,
						`c`.`title` as `title`,
                        `c`.`text` as `text`,
                        `c`.`date` as `date`,
                        `c`.`likeAmount` as `likeAmount`,
                        `c`.`uid` as `uid`,
                        `resource`.`sid` as `sid`,
                        `resource`.`paths` as `paths`
                from(select `content`.`cid` as `cid`,
                            `content`.`title` as `title`,
                            `content`.`main_text` as `text`,
                            `content`.`date` as `date`,
                            `content`.`like_amount` as `likeAmount`,
                            `content`.`uid` as `uid`,
					        `content`.`sid` as `sid`
                    from `content`
                    where `content`.`cid` = ${cid})`c`,`resource`
            where `c`.`sid` = `resource`.`sid`)`r`,
            (select `user`.`uid` as uid,
                    `user`.`nickname` as nickname,
                    `user`.`avatar_path` as avatar_path,
                    count(`follow`.`uid`) as status
            from `user`,`follow`
            where `follow`.`uid` = `user`.`uid` and `follow`.`follower` = ${uid}
            group by `user`.`uid`)u
        where `r`.`uid` = `u`.`uid`)`t`
		left join `likes` on `likes`.`goal` = `t`.`cid` and `likes`.`uid` = `t`.`uid`
		LEFT JOIN `collection` on `collection`.`cid` = `t`.`cid` and `collection`.`uid` = `t`.`uid`
		GROUP BY `t`.`cid`
    </select>

    <!--修改点赞数-->
    <update id="updateLikeAmount">
        update `content` set `like_amount` = `like_amount` + ${isLike}
        where `content`.`cid` = ${cid}
    </update>
    <!--查询点赞数-->
    <select id="queryLikeAmount" resultType="int">
        select `like_amount` from `content`
        where `content`.`cid` = ${cid}
    </select>
    <!--新增点赞-->
    <insert id="addLikes">
        insert into `likes` values(${goal},'${likeType}',${uid})
    </insert>
    <!--取消点赞-->
    <delete id="subLikes">
        delete from `likes` where `likes`.`goal` = ${goal} and `likes`.`uid` = ${uid}
    </delete>

    <!--添加收藏-->
    <insert id="addCollection">
        insert into `collection` values(${uid},${cid},'${date}')
    </insert>
    <!--取消收藏-->
    <delete id="deleteCollection">
        delete from `collection` where `collection`.`uid` = ${uid} and `collection`.`cid` = ${cid}
    </delete>

    <!--添加举报-->
    <insert id="addReportContent">
        insert into `report` values(${uid},${cid},'${date}',0,'${reason}')
    </insert>


    <!--    &lt;!&ndash;    在当前Mapper.xml中使用二级缓存&ndash;&gt;-->
    <!--    <cache eviction="FIFO"-->
    <!--           flushInterval="60000"-->
    <!--           size="512"-->
    <!--           readOnly="true"/>-->

    <select id="getContent" parameterType="map" resultMap="ContentMap">
        select *
        from bgb.content limit #{index}, #{target}
    </select>

    <resultMap id="ContentMap" type="main.biggreenbook.entity.pojo.ContentMessage">
        <result property="cid" column="cid"/>
        <result property="title" column="title"/>
        <result property="date" column="date"/>
        <result property="author" column="nickname"/>
        <result property="uid" column="uid"/>
        <result property="likeAmount" column="like_amount"/>
        <result property="text" column="main_text"/>
        <result property="path" column="paths"/>
    </resultMap>

    <select id="getContents" parameterType="map" resultMap="ContentMap">
        select c.cid,
               c.title,
               c.main_text,
               c.date,
               c.like_amount,
               c.type,
               r.paths,
               u.nickname,
               u.uid
        from resource r,
             content c
                 join user u on u.uid = c.uid
        where c.sid = r.sid limit #{index}
            , #{target};
    </select>

    <select id="countAllContents" resultType="int">
        select count(*)
        from bgb.content;
    </select>

    <delete id="deleteSelect" parameterType="java.util.List">
        delete from bgb.content where
            <foreach collection="list" item="cid" separator="or">
                cid = #{cid}
            </foreach>
    </delete>

    <!--    <select id="queryContents" parameterType="map" resultMap="ContentMap">-->
    <!--        select c.cid, c.title, c.date, c.like_amount, c.type, JSON_EXTRACT(paths, '$[0]') path, u.nickname, u.uid from resource r, content c join user u on u.uid = c.uid-->
    <!--        where c.sid = r.sid and c.title like concat('%', #{title}, '%') limit #{index}, #{target};-->
    <!--    </select>-->

    <select id="queryContents" parameterType="map" resultMap="ContentMap">
        select c.cid, c.title, c.main_text, c.date, c.like_amount, c.type, r.paths, u.nickname, u.uid from resource r,
        content c join user u on u.uid = c.uid
        <where>
            c.sid = r.sid
            <if test="uid != null">
                and c.uid = #{uid}
            </if>
            <if test="title != null">
                and c.title like concat('%', #{title}, '%')
            </if>
            <if test="nickname != null">
                and u.nickname like concat('%', #{nickname}, '%')
            </if>
            <if test="start != null">
                and c.date between #{start} and #{end}
            </if>
        </where>
        order by c.date desc limit #{index}, #{target}
    </select>

    <select id="countQueryContents" parameterType="map" resultType="int">
        select count(*) from content c, user u
        <where>
            c.uid = u.uid and
            <if test="title != null">
                c.title like concat('%', #{title}, '%')
            </if>
            <if test="nickname != null">
                u.nickname like concat('%', #{nickname}, '%')
            </if>
            <if test="uid != null">
                c.uid = #{uid}
            </if>
            <if test="start != null">
                and c.date between #{start} and #{end}
            </if>
        </where>

    </select>

    <select id="queryContentsByUid" parameterType="map" resultMap="ContentMap">
        select c.cid,
               c.title,
               c.main_text,
               c.date,
               c.like_amount,
               c.type,
               r.paths,
               u.nickname,
               u.uid
        from resource r,
             content c
                 join user u on u.uid = c.uid
        where c.sid = r.sid
          and c.uid = #{uid} limit #{index}
            , #{target};
    </select>

    <select id="checkContent" parameterType="map" resultMap="ContentMap">
        select c.cid,
               c.title,
               c.main_text,
               c.date,
               c.like_amount,
               c.type,
               paths,
               u.nickname,
               u.uid
        from resource r,
             content c
                 join user u on u.uid = c.uid
        where c.sid = r.sid
          and c.cid = #{cid};
    </select>

</mapper>
