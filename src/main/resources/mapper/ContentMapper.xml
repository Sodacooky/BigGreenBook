<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="main.biggreenbook.entity.dao.ContentMapper">


    <select id="getQueryId" resultType="java.lang.Integer">
        select count(*)
        from `content`
        <if test="search != null and search != ''">
            where `content`.`title` like '%${search}%'
            or `content`.`main_text` like '%${search}%'
        </if>
    </select>

    <resultMap id="previewCardMap" type="main.biggreenbook.entity.vo.PreviewCard">
        <id property="contentCid" column="cid"/>
        <result property="contentCid" column="cid"/>
        <result property="contentLikeAmount" column="like_amount"/>
        <result property="contentTitle" column="title"/>
        <result property="resourcePath" column="first_path"/>
        <result property="resourceType" column="type"/>
        <result property="userAvatarPath" column="avatar"/>
        <result property="userNickname" column="nickname"/>
    </resultMap>

    <select id="getContentByPage" resultMap="previewCardMap">
        select `content`.`cid`                                        as cid,
               `content`.`like_amount`                                as like_amount,
               `content`.`title`                                      as title,
               `resource`.`type`                                      as type,
               JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
               `user`.`avatar_path`                                   as avatar,
               `user`.`nickname`                                      as nickname
        from `content`
                 inner join `user` on `user`.`uid` = `content`.`uid`
                 inner join `resource` on `resource`.`sid` = `content`.`sid`
        order by `content`.`date` asc
            limit ${pageSize*pageNum}, #{pageSize}
    </select>

    <select id="getLatestContent" resultMap="previewCardMap">
        select `content`.`cid`                                        as cid,
               `content`.`like_amount`                                as like_amount,
               `content`.`title`                                      as title,
               `resource`.`type`                                      as type,
               JSON_UNQUOTE(JSON_EXTRACT(`resource`.`paths`, '$[0]')) as first_path,
               `user`.`avatar_path`                                   as avatar,
               `user`.`nickname`                                      as nickname
        from `content`
                 inner join `user` on `user`.`uid` = `content`.`uid`
                 inner join `resource` on `resource`.`sid` = `content`.`sid`
        order by `content`.`date` desc limit 0,#{amount}
    </select>

    <!--    &lt;!&ndash;    在当前Mapper.xml中使用二级缓存&ndash;&gt;-->
    <!--    <cache eviction="FIFO"-->
    <!--           flushInterval="60000"-->
    <!--           size="512"-->
    <!--           readOnly="true"/>-->

    <select id="getContent" parameterType="map" resultMap="ContentMap">
        select *
        from bgb.content limit #{index}, #{target}
    </select>

    <resultMap id="ContentMap" type="main.biggreenbook.entity.pojo.ContentMessage">
        <result property="cid" column="cid"/>
        <result property="title" column="title"/>
        <result property="date" column="date"/>
        <result property="author" column="nickname"/>
        <result property="uid" column="uid"/>
        <result property="likeAmount" column="like_amount"/>
        <result property="text" column="main_text"/>
        <result property="path" column="paths"/>
    </resultMap>

    <select id="getContents" parameterType="map" resultMap="ContentMap">
        select c.cid,
               c.title,
               c.main_text,
               c.date,
               c.like_amount,
               c.type,
               r.paths,
               u.nickname,
               u.uid
        from resource r,
             content c
                 join user u on u.uid = c.uid
        where c.sid = r.sid limit #{index}
            , #{target};
    </select>

    <select id="countAllContents" resultType="int">
        select count(*)
        from bgb.content;
    </select>

    <delete id="deleteSelect" parameterType="java.util.List">
        delete from bgb.content where
            <foreach collection="list" item="cid" separator="or">
                cid = #{cid}
            </foreach>
    </delete>

    <!--    <select id="queryContents" parameterType="map" resultMap="ContentMap">-->
    <!--        select c.cid, c.title, c.date, c.like_amount, c.type, JSON_EXTRACT(paths, '$[0]') path, u.nickname, u.uid from resource r, content c join user u on u.uid = c.uid-->
    <!--        where c.sid = r.sid and c.title like concat('%', #{title}, '%') limit #{index}, #{target};-->
    <!--    </select>-->

    <select id="queryContents" parameterType="map" resultMap="ContentMap">
        select c.cid, c.title, c.main_text, c.date, c.like_amount, c.type, r.paths, u.nickname, u.uid from resource r,
        content c join user u on u.uid = c.uid
        <where>
            c.sid = r.sid
            <if test="uid != null">
                and c.uid = #{uid}
            </if>
            <if test="title != null">
                and c.title like concat('%', #{title}, '%')
            </if>
            <if test="nickname != null">
                and u.nickname like concat('%', #{nickname}, '%')
            </if>
            <if test="start != null">
                and c.date between #{start} and #{end}
            </if>
        </where>
        order by c.date desc limit #{index}, #{target}
    </select>

    <select id="countQueryContents" parameterType="map" resultType="int">
        select count(*) from content c, user u
        <where>
            c.uid = u.uid and
            <if test="title != null">
                c.title like concat('%', #{title}, '%')
            </if>
            <if test="nickname != null">
                u.nickname like concat('%', #{nickname}, '%')
            </if>
            <if test="uid != null">
                c.uid = #{uid}
            </if>
            <if test="start != null">
                and c.date between #{start} and #{end}
            </if>
        </where>

    </select>

    <select id="queryContentsByUid" parameterType="map" resultMap="ContentMap">
        select c.cid,
               c.title,
               c.main_text,
               c.date,
               c.like_amount,
               c.type,
               r.paths,
               u.nickname,
               u.uid
        from resource r,
             content c
                 join user u on u.uid = c.uid
        where c.sid = r.sid
          and c.uid = #{uid} limit #{index}
            , #{target};
    </select>

    <select id="checkContent" parameterType="map" resultMap="ContentMap">
        select c.cid,
               c.title,
               c.main_text,
               c.date,
               c.like_amount,
               c.type,
               paths,
               u.nickname,
               u.uid
        from resource r,
             content c
                 join user u on u.uid = c.uid
        where c.sid = r.sid
          and c.cid = #{cid};
    </select>

    <select id="getContentBySearch" resultMap="previewCardMap">
        select `content`.`cid` as cid,
        `content`.`like_amount` as like_amount,
        `content`.`title` as title,
        `resource`.`type` as type,
        JSON_EXTRACT(`resource`.`paths`, '$[0]') as first_path,
        `user`.`avatar_path` as avatar,
        `user`.`nickname` as nickname
        from `content`
        inner join `user` on `user`.`uid` = `content`.`uid`
        inner join `resource` on `resource`.`sid` = `content`.`sid`

        <if test="search != null and search != ''">
            where `content`.`title` like '%${search}%'
            or `content`.`main_text` like '%${search}%'
        </if>
        <choose>
            <when test="sort == 'HOT' and pageNum == 0">
                order by `content`.`like_amount` desc limit 0,#{amount}
            </when>
            <when test="sort == 'HOT' and pageNum != 0">
                order by `content`.`like_amount` asc limit ${pageSize*pageNum}, #{pageSize}
            </when>
            <when test="sort == 'LAST' and pageNum == 0">
                order by `content`.`date` desc limit 0,#{amount}
            </when>
            <when test="sort == 'LAST' and pageNum != 0">
                order by `content`.`date` asc limit ${pageSize*pageNum}, #{pageSize}
            </when>
        </choose>
    </select>
</mapper>
